AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  StackName:
    Type: String
    Default: core
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  SecretToken:
    Type: String
    Default: c19e6cb93c2ead67ec990925da625c7500ae2d047861cce3986ff8c892c15028d21da16e8743f2e80c51ca6491fe991814bbac2994ef9a80b5a8f65ef868e820
    Description: A name for the service
  ServiceName:
    Type: String
    Default: web
    Description: A name for the service
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  ContainerCpuNginx:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemoryNginx:
    Type: Number
    Default: 256
    Description: How much memory in megabytes to give the container
  ContainerPortNginx:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  ContainerCpuDockerzon:
    Type: Number
    Default: 512
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemoryDockerzon:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  ContainerPortDockerzon:
    Type: Number
    Default: 8000
    Description: What port number the application inside the docker container is binding to
  TaskCpu:
    Type: Number
    Default: 2048
    Description: How much CPU to give the task. 1024 is 1 CPU
  TaskMemory:
    Type: Number
    Default: 4096
    Description: How much memory in megabytes to give the task
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 2
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]


# ┌────────────────────────────────────────────────────────────────────┐
# │████████████████████████████████████████████████████████████████████│
# │████████████████████████████████████████████████████████████████████│
# └────────────────────────────────────────────────────────────────────┘
#     ┌─────────────┐  ┌─────────────┐          ╔════════════════════╗
#     │EcrDockerzon │  │EcrNginx     │  ┏━━━━━━━║ TaskExecutionRole  ║
#     └─────────────┘  └─────────────┘  ┃       ╚════════════════════╝
# ┌─────────────────────────────────────╋────◀━━━━━━┓
# │ServiceWeb                           ┃    │      ┃      ╔════════════════╗
# │┌────────────────────────────────────▼──┐ │      ┗━━━━━━▶ServiceRole     ║
# ││TaskDefinitionWeb - Family: web-service│ │             ║                ║
# ││                                       │ │             ║access to       ║
# ││  ┌───────────────────────────────┐    │ │             ║register/unregis║
# ││  │ContainerDefinitionNginx       │    │ │────────────┐║ter with the    ║
# ││  └───────────────────────────────┘    │ │            │║Application Load║
# ││  ┌───────────────────────────────┐    │ │            │║Balancer (ALB)  ║
# ││  │ContainerDefinitionDockerzon   │    │ │            │║                ║
# ││  └───────────────────────────────┘    │ │            │╚════════════════╝
# │└───────────────────────────────────────┘ │            │              ▲
# └──────────────────────────────────────────┘            │            ┏━┛
#                                                         │            ┃
# ┌───────────────────────────────────────────────────────▼────────────▼
# │TargetGroup                                                         │
# │                                                                    │
# │connected to Core-LoadBalancer so it can automatically distribute   │
# │traffic across all the targets.                                     │
# └────┬────────────────────────────────────────────────────────┬──────┘
#      │ListenerRule                                            │
#      │                                                        │
#      │on Core-LoadBalancer to route traffic to TargetGroupWeb │
#      └────────────────────────────────────────────────────────┘
#
# ┌────────────────────────────────────────────────────────────────────┐
# │████████████████████████████████████████████████████████████████████│
# │████████████████████████████████████████████████████████████████████│
# └────────────────────────────────────────────────────────────────────┘

Resources:
  EcrDockerzon:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: dockerzon/dockerzon

  EcrNginx:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: dockerzon/nginx


  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  # TaskDefinitionOrginal:
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 1

  TaskDefinitionDbReset:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: db-reset
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      ContainerDefinitions:
        - Name: db-reset
          Image: '481461972950.dkr.ecr.eu-west-1.amazonaws.com/dockerzon/dockerzon:latest'
          Command:
            - ./bin/rake
            - db:reset
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'db-reset'
          Environment:
            - Name: RAILS_ENV
              Value: production
            - Name: DATABASE_URL
              Value:
                Fn::ImportValue:
                  !Join [':', [!Ref 'StackName', 'DatabaseConnectionUrl']]
            - Name: CACHE_URL
              Value:
                Fn::ImportValue:
                  !Join [':', [!Ref 'StackName', 'RedisConnectionUrl']]
            - Name: JOB_WORKER_URL
              Value:
                Fn::ImportValue:
                  !Join [':', [!Ref 'StackName', 'RedisConnectionUrl']]
            - Name: SECRET_TOKEN
              Value: !Ref 'SecretToken'

  TaskDefinitionDbMigrate:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: db-migrate
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      ContainerDefinitions:
        - Name: db-reset
          Image: '481461972950.dkr.ecr.eu-west-1.amazonaws.com/dockerzon/dockerzon:latest'
          Command:
            - ./bin/rake
            - db:migrate
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'db-migrate'
          Environment:
            - Name: RAILS_ENV
              Value: production
            - Name: DATABASE_URL
              Value:
                Fn::ImportValue:
                  !Join [':', [!Ref 'StackName', 'DatabaseConnectionUrl']]
            - Name: CACHE_URL
              Value:
                Fn::ImportValue:
                  !Join [':', [!Ref 'StackName', 'RedisConnectionUrl']]
            - Name: JOB_WORKER_URL
              Value:
                Fn::ImportValue:
                  !Join [':', [!Ref 'StackName', 'RedisConnectionUrl']]
            - Name: SECRET_TOKEN
              Value: !Ref 'SecretToken'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'TaskCpu'
      Memory: !Ref 'TaskMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: nginx
          Cpu: !Ref 'ContainerCpuNginx'
          Memory: !Ref 'ContainerMemoryNginx'
          Image: '481461972950.dkr.ecr.eu-west-1.amazonaws.com/dockerzon/nginx:latest'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPortNginx'
          VolumesFrom:
            - SourceContainer: dockerzon
        - Name: dockerzon
          Cpu: !Ref 'ContainerCpuDockerzon'
          Memory: !Ref 'ContainerMemoryDockerzon'
          Image: '481461972950.dkr.ecr.eu-west-1.amazonaws.com/dockerzon/dockerzon:latest'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPortDockerzon'
          Environment:
            - Name: RAILS_ENV
              Value: production
            - Name: DATABASE_URL
              Value:
                Fn::ImportValue:
                  !Join [':', [!Ref 'StackName', 'DatabaseConnectionUrl']]
            - Name: CACHE_URL
              Value: redis://cor-el-b35el00yb2u0.dp2ecq.0001.euw1.cache.amazonaws.com:6379
            - Name: JOB_WORKER_URL
              Value: redis://cor-el-b35el00yb2u0.dp2ecq.0001.euw1.cache.amazonaws.com:6379
            - Name: SECRET_TOKEN
              Value: !Ref 'SecretToken'


  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  # Service:
  #   Type: AWS::ECS::Service
  #   DependsOn: LoadBalancerRule
  #   Properties:
  #     ServiceName: !Ref 'ServiceName'
  #     Cluster:
  #       Fn::ImportValue:
  #         !Join [':', [!Ref 'StackName', 'ClusterName']]
  #     LaunchType: FARGATE
  #     DeploymentConfiguration:
  #       MaximumPercent: 200
  #       MinimumHealthyPercent: 75
  #     DesiredCount: !Ref 'DesiredCount'
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: ENABLED
  #         SecurityGroups:
  #           - Fn::ImportValue:
  #               !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
  #         Subnets:
  #           - Fn::ImportValue:
  #               !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
  #           - Fn::ImportValue:
  #               !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
  #     TaskDefinition: !Ref 'TaskDefinitionOriginal'
  #     LoadBalancers:
  #       - ContainerName: !Ref 'ServiceName'
  #         ContainerPort: !Ref 'ContainerPort'
  #         TargetGroupArn: !Ref 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  # TargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     HealthCheckIntervalSeconds: 30
  #     HealthCheckPath: /health_check
  #     HealthCheckProtocol: HTTP
  #     HealthCheckPort: 80
  #     HealthCheckTimeoutSeconds: 5
  #     HealthyThresholdCount: 10
  #     TargetType: ip
  #     Name: !Ref 'ServiceName'
  #     Port: !Ref 'ContainerPort'
  #     Protocol: HTTP
  #     UnhealthyThresholdCount: 2
  #     VpcId:
  #       Fn::ImportValue:
  #         !Join [':', [!Ref 'StackName', 'VPCId']]

  # Create a rule on the load balancer for routing traffic to the target group
  # LoadBalancerRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - TargetGroupArn: !Ref 'TargetGroup'
  #         Type: 'forward'
  #     Conditions:
  #       - Field: path-pattern
  #         Values: [!Ref 'Path']
  #     ListenerArn:
  #       Fn::ImportValue:
  #         !Join [':', [!Ref 'StackName', 'PublicListener']]
  #     Priority: !Ref 'Priority'
